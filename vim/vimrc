" ---------------------------------------------------
"  Author               : thomasmunduchira <Thomas Munduchira>
"  Forked from          : thebearjew/dotfiles, martin-svk/dot-files
" -----------------------------------------------------

" =====================================================
" 1.0 Plug
" =====================================================

call plug#begin()

" -----------------------------------------------------
" 1.1 Opening/Closing
" -----------------------------------------------------

" Remember sessions
Plug 'tpope/vim-obsession'
" Intelligent buffer closing
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' }

" -----------------------------------------------------
" 1.2 Interface
" -----------------------------------------------------

" Nerdtree file browser
Plug 'scrooloose/nerdtree'
" Git plugin for nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin'
" File searching
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" Lightline (simple status line)
Plug 'itchyny/lightline.vim'
" Buffers tabline
Plug 'ap/vim-buftabline'
" Git changes showed on line numbers
Plug 'airblade/vim-gitgutter'
" Seamless navigation between vim and tmux splits
Plug 'christoomey/vim-tmux-navigator'

" -----------------------------------------------------
" 1.3 Language Agnostic
" -----------------------------------------------------

" Linting
Plug 'w0rp/ale'
" Autocomplete
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" Automatically closing pair stuff
Plug 'cohama/lexima.vim'
" snippet support (C-j)
Plug 'SirVer/ultisnips'
" Commenting support (gc)
Plug 'tpope/vim-commentary'
" CamelCase and snake_case motions
Plug 'bkad/CamelCaseMotion'
" Heuristically set indent settings
Plug 'tpope/vim-sleuth'
" Easily expand selected region
Plug 'terryma/vim-expand-region'

" -----------------------------------------------------
" 1.4 JavaScript
" -----------------------------------------------------

" Modern JS support (indent, syntax, etc)
Plug 'pangloss/vim-javascript'
" JSX syntax
Plug 'mxw/vim-jsx'
" Typescript syntax
Plug 'leafgarland/typescript-vim'
" JSON syntax
Plug 'elzr/vim-json'
" JavaScript autocomplete
Plug 'carlitux/deoplete-ternjs'
" Flow autocomplete
Plug 'steelsojka/deoplete-flow'

" -----------------------------------------------------
" 1.5 HTML/CSS
" -----------------------------------------------------

" HTML5 syntax
Plug 'othree/html5.vim'
" Emmett HTML completion
Plug 'mattn/emmet-vim', { 'for': ['javascript.jsx', 'html', 'css'] }
" HTML Tag Closing
Plug 'alvan/vim-closetag'
" Color highlighter
Plug 'lilydjwg/colorizer', { 'for': ['css', 'sass', 'scss', 'less', 'html', 'xdefaults', 'javascript', 'javascript.jsx', 'vim'] }

" -----------------------------------------------------
" 1.6 Elm
" -----------------------------------------------------

" Elm syntax
Plug 'elmcast/elm-vim'

" -----------------------------------------------------
" 1.7 Elixir
" -----------------------------------------------------

" Elixir syntax
Plug 'elixir-lang/vim-elixir'

" -----------------------------------------------------
" 1.8 R
" -----------------------------------------------------

" Dev environment for R
Plug 'jalvesaq/nvim-r'

" -----------------------------------------------------
" 1.9 Lisp
" -----------------------------------------------------

" Dev environment for Lisp
Plug 'l04m33/vlime', { 'rtp': 'vim/' }
" Indent lisp code
Plug 'bhurlow/vim-parinfer'

" -----------------------------------------------------
" 1.10 Markdown
" -----------------------------------------------------

" Markdown syntax
Plug 'tpope/vim-markdown'
" Preview Markdown files
Plug 'JamshedVesuna/vim-markdown-preview'

" -----------------------------------------------------
" 1.11 LaTeX
" -----------------------------------------------------

" Vim support for LaTeX
Plug 'lervag/vimtex'

" -----------------------------------------------------
" 1.12 tmux
" -----------------------------------------------------

" Tmux syntax
Plug 'keith/tmux.vim'

call plug#end()

" =====================================================
" 2.0 Default Settings
" =====================================================

" -----------------------------------------------------
" 2.1 Basic settings
" -----------------------------------------------------

set encoding=utf-8                          " The encoding displayed.
set fileencoding=utf-8                      " The encoding written to file.
scriptencoding utf-8                        " Set utf-8 as default script encoding

set shell=/bin/zsh                          " Setting shell to zsh
set number                                  " Line numbers on
set showmode                                " Always show mode
set showcmd                                 " Show commands as you type them
set nowrap                                  " Do not wrap long line
set cmdheight=1                             " Command line height
set pumheight=10                            " Completion window max size
set noswapfile                              " New buffers will be loaded without creating a swapfile
set hidden                                  " Enables to switch between unsaved buffers and keep undo history
set clipboard+=unnamed                      " Allow to use system clipboard
set lazyredraw                              " Don't redraw while executing macros (better performance)
set showmatch                               " Show matching brackets when text indicator is over them
set matchtime=2                             " How many tenths of a second to blink when matching brackets
set nostartofline                           " Prevent cursor from moving to beginning of line when switching buffers
set virtualedit=block                       " To be able to select past EOL in visual block mode
set nojoinspaces                            " No extra space when joining a line which ends with . ? !
set scrolloff=5                             " Scroll when closing to top or bottom of the screen
set updatetime=1000                         " Update time used to create swap file or other things
set suffixesadd+=.js,.rb                    " Add js and ruby files to suffixesset synmaxcol=220                           " Don't try to syntax highlight minified files
set synmaxcol=220                           " Don't try to syntax highlight minified files

" --------------------------------------------------
" 2.3 Spelling settings
" --------------------------------------------------

set splitbelow                              " Splitting a window will put the new window below the current
set splitright                              " Splitting a window will put the new window right of the current

" --------------------------------------------------
" 2.3 Spelling settings
" --------------------------------------------------

set spelllang=en_us                         " Set language to US English
set nospell                                 " Disable checking by default (use <F4> to toggle)

" --------------------------------------------------
" 2.4 Search settings
" --------------------------------------------------

set ignorecase                              " Ignore case by default
set smartcase                               " Make search case sensitive only if it contains uppercase letters
set wrapscan                                " Search again from top when reached the bottom
set nohlsearch                              " Don't highlight after search

" ---------------------------------------------------------------------------------------------------------------------
" 2.5 Persistent undo settings
" ---------------------------------------------------------------------------------------------------------------------

if has('persistent_undo')
  set undofile
  if has('nvim')
    set undodir=~/.config/nvim/undo//
  else
    set undodir=~/.vim/undo//
  endif
  call system('mkdir -p ' . &undodir)
endif

" --------------------------------------------------
" 2.6 White characters settings
" --------------------------------------------------

set list                                    " Show listchars by default
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:·,nbsp:·
set showbreak=↪

" --------------------------------------------------
" 2.7 Filetype settings
" --------------------------------------------------

filetype plugin on
filetype indent on

" --------------------------------------------------
" 2.8 Folding settings
" --------------------------------------------------

set foldmethod=marker                       " Markers are used to specify folds.
set foldlevel=2                             " Start folding automatically from level 2
set fillchars="fold: "                      " Characters to fill the statuslines and vertical separators

" --------------------------------------------------
" 2.9 Omni completion settings
" --------------------------------------------------

set completeopt-=preview                    " Don't show preview scratch buffers
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=tmp/**

" --------------------------------------------------
" 2.10 Neovim specific settings
" --------------------------------------------------

if has('nvim')
  let g:loaded_python_provider=1                        " Disable python 2 interface
  let g:python_host_skip_check=1                        " Skip python 2 host check
  let g:python3_host_prog='/usr/local/bin/python3'      " Set python 3 host program
  set inccommand=nosplit                                " Live preview of substitutes and other similar commands
endif

" =====================================================
" 3.0 Mapping settings
" =====================================================

" 3.1 Setting leader
" -----------------------------------------------------
let g:mapleader="\<space>"

" -----------------------------------------------------
" 3.2 Disabling arrow keys, space key, exmode enter
" with Q key, help with F1, etc.
" -----------------------------------------------------

nnoremap <up> <NOP>
nnoremap <down> <NOP>
nnoremap <left> <NOP>
nnoremap <right> <NOP>
nnoremap <bs> <NOP>
nnoremap <delete> <NOP>
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>
nnoremap <Space> <NOP>
inoremap <F1> <NOP>
nnoremap <F1> <NOP>
nnoremap Q <NOP>

" -----------------------------------------------------
" 3.3 Vim defaults overriding
" -----------------------------------------------------

" Easier window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Native Neovim terminal switching
tnoremap <Esc> <C-\><C-n>
" tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" Visual linewise up and down by default (and use gj gk to go quicker)
nnoremap j gj
nnoremap k gk
nnoremap gj 5j
nnoremap gk 5k
vnoremap j gj
vnoremap k gk
vnoremap gj 5j
vnoremap gk 5k

" When jump to next match also center screen
" Note: Use :norm! to make it count as one command. (i.e. for i_CTRL-o)
nnoremap <silent> n :norm! nzz<CR>
nnoremap <silent> N :norm! Nzz<CR>
vnoremap <silent> n :norm! nzz<CR>
vnoremap <silent> N :norm! Nzz<CR>

" Same when moving up and down
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nnoremap <C-f> <C-f>zz
nnoremap <C-b> <C-b>zz
vnoremap <C-u> <C-u>zz
vnoremap <C-d> <C-d>zz
vnoremap <C-f> <C-f>zz
vnoremap <C-b> <C-b>zz

" Remap H and L (top, bottom of screen to left and right end of line)
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

" More logical Y (default was alias for yy)
nnoremap Y y$

" Don't yank to default register when changing something
nnoremap c "xc
xnoremap c "xc

" After block yank and paste, move cursor to the end of operated text and don't override register
vnoremap y y`]
vnoremap p "_dP`]
nnoremap p p`]

" Use CamelCaseMotion instead of default motions
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" Fix the cw at the end of line bug default vim has special treatment (:help cw)
nmap cw ce
nmap dw de

" Uppercase word in insert mode
inoremap <C-u> <ESC>mzgUiw`za

" Matching brackets with TAB (using matchit) (Breaks the <C-i> jump)
map <TAB> %
silent! unmap [%
silent! unmap ]%

" Don't cancel visual select when shifting
xnoremap <  <gv
xnoremap >  >gv

" Stay down after creating fold
vnoremap zf mzzf`zzz

" Make . work with visually selected lines
xnoremap . :norm.<CR>

" Terminal mode mappings
if has('nvim')
  tnoremap <ESC> <C-\><C-n>
  tnoremap ,<ESC> <ESC>
endif

" -----------------------------------------------------
" 3.4 Common tasks
" -----------------------------------------------------

" Quick save and close buffer
nnoremap <leader>s :w<CR>
nnoremap <silent> <leader>c :Sayonara!<CR>
nnoremap <silent> <leader>q :Sayonara<CR>

" Yank and paste from clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>yy "+yy
nnoremap <leader>p "+p

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" CTags generation / navigation (:tselect to select from menu)
nnoremap ]t :tn<CR>
nnoremap [t :tp<CR>
nnoremap <leader>ts :ts<CR>
nnoremap <leader>tg :GTags<CR>

" QuickFix navigation
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>

" Location list navigation
nnoremap ]l :lnext<CR>
nnoremap [l :lprevious<CR>

" Error mnemonic (Neomake uses location list)
nnoremap ]e :lnext<CR>
nnoremap [e :lprevious<CR>

" Reselect last-pasted text
nnoremap gp `[v`]

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" [S]plit line (sister to [J]oin lines) S is covered by cc.
nnoremap S mzi<CR><ESC>`z

" Easier fold toggling
nnoremap <Space>z za
" Start substitute on current word under the cursor
nnoremap <Space>s :%s///gc<Left><Left><Left>

" Start search on current word under the cursor
nnoremap <Space>/ /<CR>

" Start reverse search on current word under the cursor
nnoremap <Space>? ?<CR>

" Faster sort
vnoremap <Space>s :!sort<CR>

" Fix spelling error on the go
inoremap <C-s> <C-g>u<ESC>[s1z=`]a<C-g>u

" -----------------------------------------------------
" 3.6 Window / Buffer management
" -----------------------------------------------------

" Intelligent windows resizing using ctrl + arrow keys
" nnoremap <silent> <S-Right> :call utils#intelligentVerticalResize('right')<CR>
" nnoremap <silent> <S-Left> :call utils#intelligentVerticalResize('left')<CR>
" nnoremap <silent> <S-Up> :resize +1<CR>
" nnoremap <silent> <S-Down> :resize -1<CR>

" Buffers navigation and management
nnoremap <silent> + :bn<CR>
nnoremap <silent> _ :bp<CR>

" 10x horizontal window resize
map <silent> <M-l> 10<C-w>>
map <silent> <M-h> 10<C-w><
map <silent> <M-j> 10<C-w>-
map <silent> <M-k> 10<C-w>+

" 10x vertical window resize
" nnoremap <silent> <C-w>+ 5<C-w>+
" nnoremap <silent> <C-w>- 5<C-w>-

" -----------------------------------------------------
" 3.7 Command abbreviations and mappings
" -----------------------------------------------------

" Quiting and saving all
cnoremap ww wqall
cnoremap qq qall

" =====================================================
" 4.0 Plugins settings
" =====================================================

" -----------------------------------------------------
" 4.1 Plug settings
" -----------------------------------------------------
let g:plug_timeout=20

" -----------------------------------------------------
" 4.2 FZF
" -----------------------------------------------------

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~20%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" -----------------------------------------------------
" 4.3 NERDTree
" -----------------------------------------------------
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=30
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeShowHidden=1
let g:NERDTreeHighlightCursorline=0
let g:NERDTreeRespectWildIgnore=1

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" -----------------------------------------------------
" 4.4 Ultisnips settings
" -----------------------------------------------------
let g:UltiSnipsUsePythonVersion=3

" -----------------------------------------------------
" 4.5 Gitgutter settings
" -----------------------------------------------------
let g:gitgutter_map_keys=0
let g:gitgutter_max_signs=9999
let g:gitgutter_sign_added='+'
let g:gitgutter_sign_modified='~'
let g:gitgutter_sign_removed='-'
let g:gitgutter_sign_modified_removed='~'
let g:gitgutter_sign_removed_first_line='-'


" -----------------------------------------------------
" 4.5 ALE settings
" -----------------------------------------------------
let g:ale_fixers = {
\  'javascript.jsx': ['eslint'],
\}

" -----------------------------------------------------
" 4.6 Vim JSX highlighting settings
" -----------------------------------------------------
let g:jsx_ext_required=0

" -----------------------------------------------------
" 4.7 Lightline settings
" -----------------------------------------------------
set laststatus=2 " always display status line
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'tab': {
      \   'active': [ 'filename' ],
      \   'inactive': [ 'filename' ]
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'filetype', 'fileencoding', 'fileformat' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"HELP":&readonly?"RO":""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&readonly)'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

" -----------------------------------------------------
" 4.8.0 Elm Settings
" -----------------------------------------------------
let g:elm_format_autosave = 1
" Disable all default Elm-vim keybdindings (redefine them below)
let g:elm_setup_keybindings = 0
"
" -----------------------------------------------------
" 4.9 Vim Markdown settings
" -----------------------------------------------------
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_folding_disabled=1

" -----------------------------------------------------
" 4.10 Vim REST console settings
" -----------------------------------------------------
let g:vrc_set_default_mapping=0
let g:vrc_output_buffer_name='__RESPONSE__.rest'

" -----------------------------------------------------
" 4.11 Deoplete autocomplete settings
" -----------------------------------------------------
let g:deoplete#enable_at_startup=1
let g:deoplete#enable_refresh_always=0
let g:deoplete#file#enable_buffer_path=1

autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

let g:deoplete#sources={}
let g:deoplete#sources._= ['around', 'buffer', 'file']
let g:deoplete#sources#rust#racer_binary='/Users/CASE/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path='/Users/CASE/.rust/rust/src'
let g:deoplete#sources.ruby=['around', 'buffer', 'member', 'file' ]
let g:deoplete#sources.vim=['around', 'buffer', 'member', 'file']
let g:deoplete#sources['javascript.jsx']=['around', 'buffer', 'file', 'ternjs']
let g:deoplete#sources.css=['around', 'buffer', 'member', 'file', 'omni']
let g:deoplete#sources.scss=['around', 'buffer', 'member', 'file', 'omni']
let g:deoplete#sources.html=['around', 'buffer', 'member', 'file', 'omni']

" -----------------------------------------------------
" 4.14 Vim-markdown settings
" -----------------------------------------------------
let g:markdown_fenced_languages=[
      \'bash=sh',
      \'git=gitconfig',
      \'javascript',
      \'lua',
      \'ruby',
      \'tmux',
      \'viml=vim',
      \'xdefaults',
      \'zsh']

" -----------------------------------------------------
" 4.17 Deoplete-tern settings
" -----------------------------------------------------
let g:tern_request_timeout=1
let g:tern_show_signature_in_pum=1

" Color scheme
set background=dark
colorscheme base16-railscasts

set autoread
au FocusLost,WinLeave * :silent! wa
au FocusGained,BufEnter * :silent! !

" =====================================================
" 5.0 Plugin mappings
" =====================================================
"
" -----------------------------------------------------
" 5.1 Vim-Plug
" -----------------------------------------------------
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PlugUpdate<CR>
nnoremap <leader>pU :PlugUpgrade<CR>
nnoremap <leader>pc :PlugClean<CR>

" -----------------------------------------------------
" 5.1 FZF mapings
" -----------------------------------------------------

" Search files recursively ([o]pen file)
nnoremap <silent> <leader>o :Files<CR>
" Search git status (edited) [f]iles
nnoremap <silent> <leader>f :GFiles?<CR>
" Search in local buffer [c]ommits
nnoremap <silent> <leader>c :BCommits<CR>
" Search in all the project [C]ommits
nnoremap <silent> <leader>C :Commits<CR>
" Search between open files - [b]uffers
nnoremap <silent> <leader>b :Buffers<CR>
" Search in [l]ines on current buffer
nnoremap <silent> <leader>l :BLines<CR>
" Search in all the opened buffers [L]ines
nnoremap <silent> <leader>L :Lines<CR>
" Search in ultisnips [s]nippets
nnoremap <silent> <leader>s :Snippets<CR>
" Search in [m]arks
noremap <silent> <leader>m :Marks<CR>
" Search in edited files [h]istory
nnoremap <silent> <leader>h :History<CR>
" Search in search [/] history
nnoremap <silent> <leader>/ :History/<CR>

" -----------------------------------------------------
" 5.3 Gitgutter
" -----------------------------------------------------
nnoremap [h :GitGutterPrevHunk<CR>
nnoremap ]h :GitGutterNextHunk<CR>
nnoremap ,hs :GitGutterStageHunk<CR>
nnoremap ,hr :GitGutterRevertHunk<CR>

" -----------------------------------------------------
" 5.4 Expand region
" -----------------------------------------------------
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" -----------------------------------------------------
" 5.5 Vim Markdown
" -----------------------------------------------------
nmap [[ <Plug>Markdown_MoveToPreviousHeader
nmap ]] <Plug>Markdown_MoveToNextHeader

" 5.5 Vim Markdown Preview
" -----------------------------------------------------
let vim_markdown_preview_toggle = 2
let vim_markdown_preview_temp_file = 1
let vim_markdown_preview_github = 1

" -----------------------------------------------------
" 5.9 nvim-r
" -----------------------------------------------------
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine

" -----------------------------------------------------
" 5.6 Deoplete autocomplete
" -----------------------------------------------------
" Insert <TAB> or select next match
inoremap <silent> <expr> <Tab> utils#tabComplete()

" Manually trigger tag autocomplete
inoremap <silent> <expr> <C-]> utils#manualTagComplete()

" <C-h>, <BS>: close popup and delete backword char
inoremap <expr><C-h> deolete#mappings#smart_close_popup()."\<C-h>"
inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"

" ==================================================
" 6.0 Color and highlighting settings
" ==================================================

" Syntax highlighting
syntax on

" Color scheme
set background=dark
colorscheme base16-railscasts

" Fix for vim-jsx mismatching closing tag colors
hi Tag        ctermfg=04
hi xmlTag     ctermfg=04
hi xmlTagName ctermfg=04
hi xmlEndTag  ctermfg=04

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Highlight term cursor differently
highlight TermCursor ctermfg=green guifg=green

" Listchars highlighting
highlight NonText ctermfg=8 guifg=gray
highlight SpecialKey ctermfg=8 guifg=gray

" Remove underline in folded lines
hi! Folded term=NONE cterm=NONE gui=NONE ctermbg=NONE

" Link highlight groups to improve buftabline colors
hi! link BufTabLineCurrent Identifier
hi! link BufTabLineActive Comment
hi! link BufTabLineHidden Comment
hi! link BufTabLineFill Comment

