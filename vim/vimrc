"Author: Thomas Munduchira

call plug#begin()

Plug '907th/vim-auto-save'

Plug 'altercation/vim-colors-solarized'

Plug 'Shougo/denite.nvim'

Plug 'w0rp/ale'

Plug 'SirVer/ultisnips'
Plug 'tpope/vim-commentary'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'itchyny/lightline.vim'

Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'lervag/vimtex'

Plug 'elmcast/elm-vim'
Plug 'jalvesaq/nvim-r'
Plug 'l04m33/vlime', { 'rtp': 'vim/' }
Plug 'bhurlow/vim-parinfer'

call plug#end()

set nocompatible

let mapleader=","

let g:auto_save = 1  " enable AutoSave on Vim startup

nnoremap <silent> <c-p> :Denite file_rec<CR>
nnoremap <silent> <leader>b :Denite buffer<CR>

let g:deoplete#enable_at_startup=1
let g:deoplete#file#enable_buffer_path=1
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
let g:deoplete#sources={}
let g:deoplete#sources._    = ['buffer', 'file', 'ultisnips']
let g:deoplete#sources.ruby = ['buffer', 'member', 'file', 'ultisnips']
let g:deoplete#sources.vim  = ['buffer', 'member', 'file', 'ultisnips']
let g:deoplete#sources['javascript.jsx'] = ['buffer', 'file', 'ultisnips', 'ternjs']
let g:deoplete#sources.css  = ['buffer', 'member', 'file', 'omni', 'ultisnips']
let g:deoplete#sources.scss = ['buffer', 'member', 'file', 'omni', 'ultisnips']
let g:deoplete#sources.html = ['buffer', 'member', 'file', 'omni', 'ultisnips']

let g:ale_fixers = {
\  'javascript': ['eslint'],
\}

set autoread
au FocusLost,WinLeave * :silent! wa
au FocusGained,BufEnter * :silent! !

set number "Line numbers on
set history=1000
set showcmd "Show commands as you type them
set autoread
set hidden
set clipboard+=unnamed

set splitbelow
set splitright

" Time out on key codes but not mapping set notimeout
set ttimeout
set ttimeoutlen=10

let g:mapleader=","

nnoremap j gj
nnoremap k gk
nnoremap gj 5j
nnoremap gk 5k
vnoremap j gj
vnoremap k gk
vnoremap gj 5j
vnoremap gk 5k

nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

nnoremap Y y$

syntax enable
set background=dark
let g:solarized_termcolors = 16
let g:solarized_termtrans = 1
colorscheme solarized

" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

set noswapfile
set nobackup
set nowb

if has('persistent_undo') && isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

set autoread
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set backspace=indent,eol,start

nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

filetype plugin on
filetype indent on

set list listchars=tab:\ \ ,trail:Â·

set nowrap
set linebreak

set foldmethod=indent
set foldnestmax=3
set nofoldenable 

set wildmode=list:longest
set wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

if exists('$TMUX')
  let &t_SI = "\ePtmux;\e\e[5 q\e\\"
  let &t_EI = "\ePtmux;\e\e[2 q\e\\"
else
  let &t_SI = "\e[5 q"
  let &t_EI = "\e[2 q"
endif

let vim_markdown_preview_github=1
let vim_markdown_preview_toggle=2

set incsearch
set hlsearch
set ignorecase
set smartcase

augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

"For lightline
set laststatus=2
set noshowmode

vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
