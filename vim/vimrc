" Author: Thomas Munduchira

call plug#begin()

Plug '907th/vim-auto-save' " automatically save buffers

Plug 'altercation/vim-colors-solarized' " color scheme

Plug 'itchyny/lightline.vim' " status bar

Plug 'scrooloose/nerdtree' " file explorer
Plug 'Xuyuanp/nerdtree-git-plugin' " git plugin for nerdtree

Plug 'Shougo/denite.nvim' " file searcher and more

" autocomplete
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'w0rp/ale' " linting

Plug 'SirVer/ultisnips' " snippets

Plug 'tpope/vim-commentary' " commenting support

" JavaScript
Plug 'carlitux/deoplete-ternjs' " JavaScript autocomplete
Plug 'steelsojka/deoplete-flow' " Flow autocomplete

" Elm
Plug 'elmcast/elm-vim' " Vim suport for Elm

" Elixir
Plug 'elixir-lang/vim-elixir' " Vim support for Elixir

" R
Plug 'jalvesaq/nvim-r' " dev environment for R

" Lisp
Plug 'l04m33/vlime', { 'rtp': 'vim/' } " dev environment for Lisp
Plug 'bhurlow/vim-parinfer' " indent lisp code

" Markdown
Plug 'JamshedVesuna/vim-markdown-preview' " preview Markdown files

" LaTeX
Plug 'lervag/vimtex' " Vim support for LaTeX

call plug#end()

set nocompatible
syntax enable
set background=dark
set autoread
au FocusLost,WinLeave * :silent! wa
au FocusGained,BufEnter * :silent! !

" Settings

set number " line numbers on
set history=1000
set showcmd " show commands as you type them
set autoread
set noswapfile " new buffers will be loaded without creating a swapfile
set hidden " enables to switch between unsaved buffers and keep undo history
set splitbelow " splitting a window will put the new window below the current
set splitright " splitting a window will put the new window right of the current
set clipboard+=unnamed " allow to use system clipboard

" time out on key codes but not mapping set notimeout
set notimeout
set ttimeout
set ttimeoutlen=10

" Leader key
let g:mapleader = "," " set leader to comma

" Mappings

nnoremap j gj
nnoremap k gk
nnoremap gj 5j
nnoremap gk 5k
vnoremap j gj
vnoremap k gk
vnoremap gj 5j
vnoremap gk 5k

nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

nnoremap Y y$

" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

set nobackup
set nowb

if has('persistent_undo') && isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

set autoread
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set backspace=indent,eol,start

nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

filetype plugin on
filetype indent on

set list listchars=tab:\ \ ,trail:Â·

set nowrap
set linebreak

set foldmethod=indent
set foldnestmax=3
set nofoldenable

set wildmode=list:longest
set wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

if exists('$TMUX')
  let &t_SI = "\ePtmux;\e\e[5 q\e\\"
  let &t_EI = "\ePtmux;\e\e[2 q\e\\"
else
  let &t_SI = "\e[5 q"
  let &t_EI = "\e[2 q"
endif

set incsearch
set hlsearch
set ignorecase
set smartcase

augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

" Color scheme configuration
let g:solarized_termcolors = 16
let g:solarized_termtrans = 1
colorscheme solarized " use Solarized color scheme

" Lightline configuration
set laststatus=2
set noshowmode

" Autosave configuration
let g:auto_save = 1 " enable AutoSave on Vim startup

" Denite configuration
nnoremap <silent> <c-p> :Denite file_rec<CR>
nnoremap <silent> <leader>b :Denite buffer<CR>

" Deoplete configuration
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#sources={}
let g:deoplete#sources._    = ['buffer', 'file', 'ultisnips']
let g:deoplete#sources.vim  = ['buffer', 'member', 'file', 'ultisnips']
let g:deoplete#sources['javascript.jsx'] = ['buffer', 'file', 'ultisnips', 'ternjs']
let g:deoplete#sources.css  = ['buffer', 'member', 'file', 'omni', 'ultisnips']
let g:deoplete#sources.scss = ['buffer', 'member', 'file', 'omni', 'ultisnips']
let g:deoplete#sources.html = ['buffer', 'member', 'file', 'omni', 'ultisnips']
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" Ale configuration
let g:ale_fixers = {
\  'javascript': ['eslint'],
\}

" Vim Markdown Preview configuration
let vim_markdown_preview_toggle = 2
let vim_markdown_preview_temp_file = 1
let vim_markdown_preview_github = 1

" nvim-r configuration
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine

